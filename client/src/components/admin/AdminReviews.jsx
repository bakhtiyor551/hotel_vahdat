import { useState, useEffect } from 'react';
import axios from 'axios';
import './AdminReviews.css';

export default function AdminReviews() {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    fetchReviews();
  }, [filter]);

  const fetchReviews = async () => {
    try {
      const token = localStorage.getItem('admin_token');
      const params = filter !== 'all' ? { status: filter } : {};
      const response = await axios.get('/api/admin/reviews', {
        params,
        headers: { Authorization: `Bearer ${token}` }
      });
      setReviews(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateStatus = async (id, status) => {
    try {
      const token = localStorage.getItem('admin_token');
      await axios.put(`/api/admin/reviews/${id}/status`, { status }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchReviews();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  };

  const handleDelete = async (id) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤?')) return;
    
    try {
      const token = localStorage.getItem('admin_token');
      await axios.delete(`/api/admin/reviews/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchReviews();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="admin-reviews">
      <h1>–û—Ç–∑—ã–≤—ã –≥–æ—Å—Ç–µ–π</h1>

      <div className="reviews-filters">
        <button 
          onClick={() => setFilter('all')} 
          className={filter === 'all' ? 'active' : ''}
        >
          –í—Å–µ
        </button>
        <button 
          onClick={() => setFilter('pending')} 
          className={filter === 'pending' ? 'active' : ''}
        >
          –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        </button>
        <button 
          onClick={() => setFilter('approved')} 
          className={filter === 'approved' ? 'active' : ''}
        >
          –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
        </button>
        <button 
          onClick={() => setFilter('rejected')} 
          className={filter === 'rejected' ? 'active' : ''}
        >
          –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
        </button>
      </div>

      <div className="reviews-grid">
        {reviews.map(review => (
          <div key={review.id} className="review-card">
            <div className="review-header">
              <div>
                <h3>{review.guest_name}</h3>
                <p className="review-date">
                  {new Date(review.created_at).toLocaleDateString('ru')}
                </p>
              </div>
              <div className="review-rating">
                {'‚≠ê'.repeat(review.rating)}
              </div>
            </div>

            <p className="review-comment">{review.comment}</p>

            <div className="review-footer">
              <span className={`status-badge ${review.status}`}>
                {review.status === 'pending' && '‚è≥ –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}
                {review.status === 'approved' && '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ'}
                {review.status === 'rejected' && '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
              </span>

              {review.status === 'pending' && (
                <div className="review-actions">
                  <button 
                    onClick={() => updateStatus(review.id, 'approved')}
                    className="btn-approve"
                  >
                    ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å
                  </button>
                  <button 
                    onClick={() => updateStatus(review.id, 'rejected')}
                    className="btn-reject"
                  >
                    ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                  </button>
                </div>
              )}

              {review.status !== 'pending' && (
                <button 
                  onClick={() => handleDelete(review.id)}
                  className="btn-delete"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              )}
            </div>
          </div>
        ))}
      </div>

      {reviews.length === 0 && (
        <div className="empty-state">
          <p>–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤</p>
        </div>
      )}
    </div>
  );
}

