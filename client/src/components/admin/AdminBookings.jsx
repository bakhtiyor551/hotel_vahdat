import { useState, useEffect } from 'react';
import axios from 'axios';
import './AdminBookings.css';

export default function AdminBookings() {
  const [bookings, setBookings] = useState([]);
  const [filteredBookings, setFilteredBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    fetchBookings();
  }, []);

  useEffect(() => {
    filterBookings();
  }, [bookings, searchTerm, statusFilter]);

  const fetchBookings = async () => {
    try {
      const token = localStorage.getItem('admin_token');
      const response = await axios.get('/api/admin/bookings', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setBookings(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const filterBookings = () => {
    let filtered = bookings;

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É, email, –Ω–æ–º–µ—Ä—É
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(b => 
        b.guest_name?.toLowerCase().includes(term) ||
        b.guest_phone?.toLowerCase().includes(term) ||
        b.guest_email?.toLowerCase().includes(term) ||
        b.room_name?.toLowerCase().includes(term) ||
        b.room_type?.toLowerCase().includes(term)
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter !== 'all') {
      filtered = filtered.filter(b => b.status === statusFilter);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

    setFilteredBookings(filtered);
  };

  const updateStatus = async (id, status) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "${getStatusLabel(status)}"?`)) {
      return;
    }

    try {
      const token = localStorage.getItem('admin_token');
      await axios.put(`/api/admin/bookings/${id}/status`, { status }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      await fetchBookings();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  };

  const deleteBooking = async (id) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
      return;
    }

    try {
      const token = localStorage.getItem('admin_token');
      await axios.delete(`/api/admin/bookings/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      await fetchBookings();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  const statusColors = {
    pending: 'bg-orange-100 text-orange-800 border-orange-500',
    confirmed: 'bg-green-100 text-green-800 border-green-500',
    cancelled: 'bg-red-100 text-red-800 border-red-500',
    completed: 'bg-gray-100 text-gray-800 border-gray-500'
  };

  const statusLabels = {
    pending: '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    confirmed: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    cancelled: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
    completed: '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };

  const getStatusLabel = (status) => {
    const labels = {
      pending: '–û–∂–∏–¥–∞–µ—Ç',
      confirmed: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      cancelled: '–û—Ç–º–µ–Ω–µ–Ω–æ',
      completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
    };
    return labels[status] || status;
  };

  const getStatusBadgeClass = (status) => {
    return `inline-block px-3 py-1 rounded-full text-sm font-semibold border-2 ${statusColors[status] || 'bg-gray-100 text-gray-800'}`;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="text-6xl mb-4 animate-bounce">‚è≥</div>
          <p className="text-xl text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      <div className="mb-8">
        <h1 className="text-4xl font-bold text-primary-800 mb-2">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
        <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –Ω–æ–º–µ—Ä–æ–≤</p>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className="bg-white rounded-2xl p-6 shadow-lg mb-6 border border-gray-200">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* –ü–æ–∏—Å–∫ */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary-800">–ü–æ–∏—Å–∫</label>
            <input
              type="text"
              placeholder="–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:border-primary-600 transition"
            />
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary-800">–°—Ç–∞—Ç—É—Å</label>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:border-primary-600 transition"
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="pending">‚è≥ –û–∂–∏–¥–∞–µ—Ç</option>
              <option value="confirmed">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</option>
              <option value="cancelled">‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ</option>
              <option value="completed">‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
            </select>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary-800">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</label>
            <div className="bg-primary-50 px-4 py-3 rounded-xl border border-primary-200">
              <span className="text-2xl font-bold text-primary-800">{filteredBookings.length}</span>
              <span className="text-gray-600 ml-2">–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</span>
            </div>
          </div>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      {filteredBookings.length > 0 ? (
        <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-200">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gradient-primary text-white">
                <tr>
                  <th className="px-6 py-4 text-left font-bold">–ì–æ—Å—Ç—å</th>
                  <th className="px-6 py-4 text-left font-bold">–ö–æ–Ω—Ç–∞–∫—Ç—ã</th>
                  <th className="px-6 py-4 text-left font-bold">–ù–æ–º–µ—Ä</th>
                  <th className="px-6 py-4 text-left font-bold">–î–∞—Ç—ã</th>
                  <th className="px-6 py-4 text-left font-bold">–°—Ç–∞—Ç—É—Å</th>
                  <th className="px-6 py-4 text-left font-bold">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredBookings.map((booking, idx) => (
                  <tr key={booking.id} className="hover:bg-gray-50 transition">
                    <td className="px-6 py-4">
                      <div className="font-bold text-primary-800">{booking.guest_name}</div>
                      <div className="text-sm text-gray-500">üë• {booking.guests} –≥–æ—Å—Ç–µ–π</div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm">
                        {booking.guest_email && (
                          <div className="text-gray-700">üìß {booking.guest_email}</div>
                        )}
                        <div className="text-gray-700">üì± {booking.guest_phone}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="font-semibold text-primary-800">{booking.room_name || 'N/A'}</div>
                      <div className="text-sm text-gray-500 capitalize">{booking.room_type}</div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm">
                        <div className="text-gray-700">üì• {new Date(booking.check_in).toLocaleDateString('ru')}</div>
                        <div className="text-gray-700">üì§ {new Date(booking.check_out).toLocaleDateString('ru')}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <span className={getStatusBadgeClass(booking.status)}>
                        {statusLabels[booking.status]}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex gap-2">
                        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
                        <button
                          onClick={() => {
                            setSelectedBooking(booking);
                            setShowModal(true);
                          }}
                          className="px-3 py-1 bg-blue-100 text-blue-800 rounded-lg hover:bg-blue-200 transition text-sm font-semibold"
                        >
                          üëÅ
                        </button>
                        
                        {/* –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ */}
                        {booking.status === 'pending' && (
                          <>
                            <button
                              onClick={() => updateStatus(booking.id, 'confirmed')}
                              className="px-3 py-1 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition text-sm font-semibold"
                            >
                              ‚úÖ
                            </button>
                            <button
                              onClick={() => updateStatus(booking.id, 'cancelled')}
                              className="px-3 py-1 bg-red-100 text-red-800 rounded-lg hover:bg-red-200 transition text-sm font-semibold"
                            >
                              ‚ùå
                            </button>
                          </>
                        )}
                        
                        {/* –£–¥–∞–ª–µ–Ω–∏–µ */}
                        <button
                          onClick={() => deleteBooking(booking.id)}
                          className="px-3 py-1 bg-gray-100 text-gray-800 rounded-lg hover:bg-gray-200 transition text-sm font-semibold"
                        >
                          üóë
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-2xl shadow-lg p-12 text-center border border-gray-200">
          <div className="text-6xl mb-4">üìã</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</h2>
          <p className="text-gray-600">
            {searchTerm || statusFilter !== 'all' 
              ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' 
              : '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å'}
          </p>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π */}
      {showModal && selectedBooking && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-gradient-primary text-white p-6 flex justify-between items-center">
              <h2 className="text-2xl font-bold">–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{selectedBooking.id}</h2>
              <button 
                onClick={() => setShowModal(false)}
                className="text-white hover:text-gold text-3xl leading-none"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-semibold text-gray-500">–ò–º—è –≥–æ—Å—Ç—è</label>
                  <p className="text-lg font-bold text-primary-800">{selectedBooking.guest_name}</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π</label>
                  <p className="text-lg font-bold text-primary-800">{selectedBooking.guests} –≥–æ—Å—Ç–µ–π</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                  <p className="text-lg font-bold text-primary-800">{selectedBooking.guest_phone}</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">Email</label>
                  <p className="text-lg font-bold text-primary-800">{selectedBooking.guest_email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞</label>
                  <p className="text-lg font-bold text-primary-800">{new Date(selectedBooking.check_in).toLocaleDateString('ru')}</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞</label>
                  <p className="text-lg font-bold text-primary-800">{new Date(selectedBooking.check_out).toLocaleDateString('ru')}</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">–ù–æ–º–µ—Ä</label>
                  <p className="text-lg font-bold text-primary-800">{selectedBooking.room_name}</p>
                </div>
                <div>
                  <label className="text-sm font-semibold text-gray-500">–¢–∏–ø –Ω–æ–º–µ—Ä–∞</label>
                  <p className="text-lg font-bold text-primary-800 capitalize">{selectedBooking.room_type}</p>
                </div>
              </div>
              
              {selectedBooking.special_requests && (
                <div>
                  <label className="text-sm font-semibold text-gray-500">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                  <p className="text-gray-700 bg-gray-50 p-4 rounded-xl mt-2">{selectedBooking.special_requests}</p>
                </div>
              )}
              
              <div>
                <label className="text-sm font-semibold text-gray-500">–°—Ç–∞—Ç—É—Å</label>
                <span className={getStatusBadgeClass(selectedBooking.status)}>
                  {statusLabels[selectedBooking.status]}
                </span>
              </div>
              
              <div className="pt-4 border-t border-gray-200 flex gap-4">
                <button
                  onClick={() => setShowModal(false)}
                  className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-3 rounded-xl transition"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </button>
                <button
                  onClick={() => {
                    setShowModal(false);
                    updateStatus(selectedBooking.id, 'confirmed');
                  }}
                  className="flex-1 btn-primary"
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

