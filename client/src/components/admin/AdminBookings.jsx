import { useState, useEffect } from 'react';
import axios from 'axios';
import './AdminBookings.css';

export default function AdminBookings() {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchBookings();
  }, []);

  const fetchBookings = async () => {
    try {
      const token = localStorage.getItem('admin_token');
      const response = await axios.get('/api/admin/bookings', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setBookings(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateStatus = async (id, status) => {
    try {
      const token = localStorage.getItem('admin_token');
      await axios.put(`/api/admin/bookings/${id}/status`, { status }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchBookings();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  };

  const statusColors = {
    pending: 'orange',
    confirmed: 'green',
    cancelled: 'red',
    completed: 'gray'
  };

  const statusLabels = {
    pending: '–û–∂–∏–¥–∞–µ—Ç',
    confirmed: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    cancelled: '–û—Ç–º–µ–Ω–µ–Ω–æ',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="admin-bookings">
      <h1>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h1>

      <div className="bookings-table">
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>–ì–æ—Å—Ç—å</th>
              <th>–ö–æ–Ω—Ç–∞–∫—Ç—ã</th>
              <th>–ù–æ–º–µ—Ä</th>
              <th>–î–∞—Ç—ã</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {bookings.map(booking => (
              <tr key={booking.id}>
                <td>#{booking.id}</td>
                <td>
                  <strong>{booking.guest_name}</strong>
                  <br />
                  <small>{booking.guests} –≥–æ—Å—Ç–µ–π</small>
                </td>
                <td>
                  <div>üìß {booking.guest_email}</div>
                  <div>üì± {booking.guest_phone}</div>
                </td>
                <td>
                  <strong>{booking.room_name}</strong>
                  <br />
                  <small>{booking.room_type}</small>
                </td>
                <td>
                  <div>üì• {new Date(booking.check_in).toLocaleDateString('ru')}</div>
                  <div>üì§ {new Date(booking.check_out).toLocaleDateString('ru')}</div>
                </td>
                <td>
                  <span className={`status-badge ${statusColors[booking.status]}`}>
                    {statusLabels[booking.status]}
                  </span>
                </td>
                <td>
                  {booking.status === 'pending' && (
                    <div className="action-buttons">
                      <button 
                        onClick={() => updateStatus(booking.id, 'confirmed')}
                        className="btn-confirm"
                      >
                        ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                      </button>
                      <button 
                        onClick={() => updateStatus(booking.id, 'cancelled')}
                        className="btn-cancel"
                      >
                        ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                      </button>
                    </div>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {bookings.length === 0 && (
        <div className="empty-state">
          <p>–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
        </div>
      )}
    </div>
  );
}

