import { useState, useEffect, useRef } from 'react';
import adminApi from '../../utils/adminApi';
import { useNavigate } from 'react-router-dom';
import './AddRoomForm.css';

const AMENITIES_OPTIONS = [
  { id: 'wifi', label: 'Wi-Fi', icon: 'üåê' },
  { id: 'air_conditioning', label: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', icon: '‚ùÑÔ∏è' },
  { id: 'tv', label: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä', icon: 'üì∫' },
  { id: 'breakfast', label: '–ó–∞–≤—Ç—Ä–∞–∫', icon: 'ü•ê' },
  { id: 'bathroom', label: '–í–∞–Ω–Ω–∞—è', icon: 'üöø' },
  { id: 'minibar', label: '–ú–∏–Ω–∏-–±–∞—Ä', icon: 'üçæ' },
  { id: 'safe', label: '–°–µ–π—Ñ', icon: 'üîí' },
  { id: 'balcony', label: '–ë–∞–ª–∫–æ–Ω', icon: 'üåÖ' },
  { id: 'jacuzzi', label: '–î–∂–∞–∫—É–∑–∏', icon: 'üíß' },
  { id: 'parking', label: '–ü–∞—Ä–∫–æ–≤–∫–∞', icon: 'üöó' },
  { id: 'pet_friendly', label: '–†–∞–∑—Ä–µ—à–µ–Ω—ã –∂–∏–≤–æ—Ç–Ω—ã–µ', icon: 'üêï' },
  { id: 'smoking', label: '–ö—É—Ä—è—â–∏–π', icon: 'üö¨' },
];

export default function AddRoomForm() {
  const navigate = useNavigate();
  const fileInputRef = useRef(null);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [isDragging, setIsDragging] = useState(false);
  const [photos, setPhotos] = useState([]);
  const [selectedAmenities, setSelectedAmenities] = useState([]);
  
  const [formData, setFormData] = useState({
    name: '',
    type: 'economy',
    price: '',
    currency: 'TJS',
    capacity: 2,
    area: '',
    beds: '',
    description: '',
    full_description: '',
    seo_title: '',
    seo_description: '',
    sort_order: 0,
    status: 'active'
  });

  // –û—á–∏—Å—Ç–∫–∞ URL –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      photos.forEach(photo => {
        if (photo.preview) {
          URL.revokeObjectURL(photo.preview);
        }
      });
    };
  }, [photos]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  const handleAmenityChange = (amenityId) => {
    setSelectedAmenities(prev => 
      prev.includes(amenityId) 
        ? prev.filter(id => id !== amenityId)
        : [...prev, amenityId]
    );
  };

  const handleFileSelect = (files) => {
    const fileArray = Array.from(files);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç
    const validFiles = [];
    for (const file of fileArray) {
      if (file.size > 3 * 1024 * 1024) {
        alert(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 3 –ú–ë)`);
        continue;
      }
      
      if (!file.type.startsWith('image/')) {
        alert(`–§–∞–π–ª ${file.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`);
        continue;
      }
      
      validFiles.push(file);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    const totalPhotos = photos.length + validFiles.length;
    if (totalPhotos > 10) {
      alert('–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
      validFiles.splice(0, 10 - photos.length);
    }
    
    const newPhotos = validFiles.map(file => ({
      file,
      preview: URL.createObjectURL(file),
      id: Date.now() + Math.random()
    }));
    setPhotos(prev => [...prev, ...newPhotos]);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    const files = e.dataTransfer.files;
    handleFileSelect(files);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const removePhoto = (id) => {
    setPhotos(prev => {
      const photo = prev.find(p => p.id === id);
      if (photo?.preview) {
        URL.revokeObjectURL(photo.preview);
      }
      return prev.filter(p => p.id !== id);
    });
  };

  const setPrimaryPhoto = (targetId) => {
    setPhotos(prev => {
      const reordered = prev.map(p => ({ ...p, isPrimary: p.id === targetId }));
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –Ω–∞—á–∞–ª–æ
      const newPrimaryIndex = reordered.findIndex(p => p.id === targetId);
      if (newPrimaryIndex > 0) {
        const newOrder = [...reordered];
        const [primaryPhoto] = newOrder.splice(newPrimaryIndex, 1);
        return [primaryPhoto, ...newOrder];
      }
      return reordered;
    });
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name || formData.name.trim().length < 3) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    if (!formData.type) {
      newErrors.type = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    }
    
    const price = parseFloat(formData.price);
    if (!formData.price || isNaN(price) || price <= 0) {
      newErrors.price = '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }
    
    const capacity = parseInt(formData.capacity);
    if (!formData.capacity || isNaN(capacity) || capacity < 1) {
      newErrors.capacity = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1';
    }
    
    // –§–æ—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    
    if (!formData.description || formData.description.trim().length < 10) {
      newErrors.description = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    if (!formData.full_description || formData.full_description.trim().length < 20) {
      newErrors.full_description = '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
      return;
    }
    
    setLoading(true);
    
    try {
      const formDataToSend = new FormData();
      
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      formDataToSend.append('name', formData.name);
      formDataToSend.append('type', formData.type);
      formDataToSend.append('price', String(formData.price));
      formDataToSend.append('currency', formData.currency);
      formDataToSend.append('capacity', String(formData.capacity));
      if (formData.area) formDataToSend.append('area', String(formData.area));
      if (formData.beds) formDataToSend.append('beds', formData.beds);
      
      // –û–ø–∏—Å–∞–Ω–∏—è
      formDataToSend.append('description', formData.description);
      formDataToSend.append('full_description', formData.full_description);
      
      // –£–¥–æ–±—Å—Ç–≤–∞ (–∫–∞–∫ JSON –º–∞—Å—Å–∏–≤)
      formDataToSend.append('amenities', JSON.stringify(selectedAmenities));
      
      // SEO
      if (formData.seo_title) formDataToSend.append('seo_title', formData.seo_title);
      if (formData.seo_description) formDataToSend.append('seo_description', formData.seo_description);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
      formDataToSend.append('sort_order', String(formData.sort_order));
      formDataToSend.append('status', formData.status);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
      photos.forEach((photo) => {
        formDataToSend.append('photos', photo.file);
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await adminApi.post('/admin/rooms', formDataToSend, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert('‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤
      navigate('/admin/rooms');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞:', error);
      const errorMessage = error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞';
      alert('‚ùå ' + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="add-room-container">
      <div className="add-room-header">
        <h1>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä</h1>
        <button 
          onClick={() => navigate('/admin/rooms')} 
          className="btn-secondary"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        </button>
      </div>

      <form onSubmit={handleSubmit} className="add-room-form">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <section className="form-section">
          <h2>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          
          <div className="form-row">
            <div className="form-group">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ *</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"
                required
              />
              {errors.name && <span className="error">{errors.name}</span>}
            </div>

            <div className="form-group">
              <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
              <select
                name="type"
                value={formData.type}
                onChange={handleInputChange}
                required
              >
                <option value="economy">–≠–∫–æ–Ω–æ–º</option>
                <option value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç</option>
                <option value="luxury">–õ—é–∫—Å</option>
              </select>
              {errors.type && <span className="error">{errors.type}</span>}
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å *</label>
              <input
                type="number"
                name="price"
                value={formData.price}
                onChange={handleInputChange}
                min="0"
                step="0.01"
                placeholder="0.00"
                required
              />
              {errors.price && <span className="error">{errors.price}</span>}
            </div>

            <div className="form-group">
              <label>–í–∞–ª—é—Ç–∞ *</label>
              <select
                name="currency"
                value={formData.currency}
                onChange={handleInputChange}
                required
              >
                <option value="TJS">TJS (—Å–æ–º–æ–Ω–∏)</option>
                <option value="USD">USD (–¥–æ–ª–ª–∞—Ä—ã)</option>
                <option value="RUB">RUB (—Ä—É–±–ª–∏)</option>
              </select>
            </div>

            <div className="form-group">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π *</label>
              <input
                type="number"
                name="capacity"
                value={formData.capacity}
                onChange={handleInputChange}
                min="1"
                max="10"
                required
              />
              {errors.capacity && <span className="error">{errors.capacity}</span>}
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>–ü–ª–æ—â–∞–¥—å (–º¬≤)</label>
              <input
                type="number"
                name="area"
                value={formData.area}
                onChange={handleInputChange}
                min="0"
                step="0.1"
                placeholder="0"
              />
            </div>

            <div className="form-group">
              <label>–ö—Ä–æ–≤–∞—Ç–∏</label>
              <input
                type="text"
                name="beds"
                value={formData.beds}
                onChange={handleInputChange}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è"
              />
            </div>
          </div>
        </section>

        {/* –û–ø–∏—Å–∞–Ω–∏—è */}
        <section className="form-section">
          <h2>–û–ø–∏—Å–∞–Ω–∏–µ</h2>
          
          <div className="form-group">
            <label>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ * (2-3 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏)</label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              rows="3"
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞..."
              required
            />
            {errors.description && <span className="error">{errors.description}</span>}
          </div>

          <div className="form-group">
            <label>–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ * (–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞)</label>
            <textarea
              name="full_description"
              value={formData.full_description}
              onChange={handleInputChange}
              rows="8"
              placeholder="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏..."
              required
            />
            {errors.full_description && <span className="error">{errors.full_description}</span>}
          </div>
        </section>

        {/* –£–¥–æ–±—Å—Ç–≤–∞ */}
        <section className="form-section">
          <h2>–£–¥–æ–±—Å—Ç–≤–∞</h2>
          <div className="amenities-grid">
            {AMENITIES_OPTIONS.map(amenity => (
              <label key={amenity.id} className="amenity-checkbox">
                <input
                  type="checkbox"
                  checked={selectedAmenities.includes(amenity.id)}
                  onChange={() => handleAmenityChange(amenity.id)}
                />
                <span className="amenity-icon">{amenity.icon}</span>
                <span className="amenity-label">{amenity.label}</span>
              </label>
            ))}
          </div>
        </section>

        {/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
        <section className="form-section">
          <h2>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–æ–º–µ—Ä–∞</h2>
          
          <div 
            className={`photo-upload-area ${isDragging ? 'dragging' : ''} ${photos.length === 0 ? 'empty' : ''}`}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onClick={() => fileInputRef.current?.click()}
          >
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              multiple
              style={{ display: 'none' }}
              onChange={(e) => handleFileSelect(e.target.files)}
            />
            
            {photos.length === 0 ? (
              <div className="upload-placeholder">
                <div className="upload-icon">üì∏</div>
                <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                <small>–§–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP (–º–∞–∫—Å–∏–º—É–º 3 –ú–ë –∫–∞–∂–¥–æ–µ)</small>
              </div>
            ) : null}
            
            {photos.length > 0 && (
              <div className="photo-preview-grid">
                {photos.map((photo, index) => (
                  <div key={photo.id} className="photo-preview-item">
                    <div className="photo-actions">
                      {index === 0 && <span className="primary-badge">–û—Å–Ω–æ–≤–Ω–æ–µ</span>}
                      {index !== 0 && (
                        <button 
                          type="button"
                          onClick={() => setPrimaryPhoto(photo.id)}
                          className="btn-set-primary"
                        >
                          –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º
                        </button>
                      )}
                      <button 
                        type="button"
                        onClick={() => removePhoto(photo.id)}
                        className="btn-remove-photo"
                      >
                        ‚úï
                      </button>
                    </div>
                    <img src={photo.preview} alt={`Preview ${index + 1}`} />
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {errors.photos && <span className="error">{errors.photos}</span>}
          
          {photos.length > 0 && photos.length < 10 && (
            <button 
              type="button" 
              onClick={() => fileInputRef.current?.click()}
              className="btn-add-more-photos"
            >
              + –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
            </button>
          )}
        </section>

        {/* SEO */}
        <section className="form-section">
          <h2>SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          
          <div className="form-group">
            <label>SEO Title</label>
            <input
              type="text"
              name="seo_title"
              value={formData.seo_title}
              onChange={handleInputChange}
              placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
            />
          </div>

          <div className="form-group">
            <label>SEO Description</label>
            <textarea
              name="seo_description"
              value={formData.seo_description}
              onChange={handleInputChange}
              rows="2"
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
            />
          </div>
        </section>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ */}
        <section className="form-section">
          <h2>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h2>
          
          <div className="form-row">
            <div className="form-group">
              <label>–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
              <input
                type="number"
                name="sort_order"
                value={formData.sort_order}
                onChange={handleInputChange}
                min="0"
              />
            </div>

            <div className="form-group">
              <label>–°—Ç–∞—Ç—É—Å *</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleInputChange}
                required
              >
                <option value="active">–ê–∫—Ç–∏–≤–µ–Ω</option>
                <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
              </select>
            </div>
          </div>
        </section>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="form-actions">
          <button 
            type="button" 
            onClick={() => navigate('/admin/rooms')} 
            className="btn-cancel"
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </button>
          <button 
            type="submit" 
            className="btn-save"
            disabled={loading}
          >
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
        </div>
      </form>
    </div>
  );
}

