import { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { roomsAPI } from '../utils/api';
import BookingModal from '../components/BookingModal';

function RoomDetails() {
  const { id } = useParams();
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [room, setRoom] = useState(null);
  const [loading, setLoading] = useState(true);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [showBookingModal, setShowBookingModal] = useState(false);

  useEffect(() => {
    loadRoom();
  }, [id]);

  const loadRoom = async () => {
    try {
      const res = await roomsAPI.getById(id);
      setRoom(res.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="section-padding text-center py-20">
        <div className="text-6xl mb-4">‚è≥</div>
        <p className="text-xl text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  if (!room) {
    return (
      <div className="section-padding text-center py-20">
        <h2 className="text-3xl font-bold mb-4">–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <Link to="/rooms" className="btn-primary mt-4 inline-block">
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–æ–º–µ—Ä–∞–º
        </Link>
      </div>
    );
  }

  // –ú–∞–ø–ø–∏–Ω–≥ ID —É–¥–æ–±—Å—Ç–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è
  const amenityLabels = {
    wifi: 'Wi-Fi üåê',
    air_conditioning: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä ‚ùÑÔ∏è',
    tv: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä üì∫',
    breakfast: '–ó–∞–≤—Ç—Ä–∞–∫ ü•ê',
    bathroom: '–í–∞–Ω–Ω–∞—è üöø',
    minibar: '–ú–∏–Ω–∏-–±–∞—Ä üçæ',
    safe: '–°–µ–π—Ñ üîí',
    balcony: '–ë–∞–ª–∫–æ–Ω üåÖ',
    jacuzzi: '–î–∂–∞–∫—É–∑–∏ üíß',
    parking: '–ü–∞—Ä–∫–æ–≤–∫–∞ üöó',
    pet_friendly: '–†–∞–∑—Ä–µ—à–µ–Ω—ã –∂–∏–≤–æ—Ç–Ω—ã–µ üêï',
    smoking: '–ö—É—Ä—è—â–∏–π üö¨'
  };
  
  const amenities = room.amenities ? JSON.parse(room.amenities).map(id => amenityLabels[id] || id) : [];
  
  // –î–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–æ–º–µ—Ä–∞
  const getRoomSpecs = () => {
    const specs = {
      economy: { area: '18 –º¬≤', beds: '1 –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è', breakfast: '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ' },
      standard: { area: '25 –º¬≤', beds: '1 –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è', breakfast: '–í–∫–ª—é—á—ë–Ω' },
      luxury: { area: '35 –º¬≤', beds: '1 –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è', breakfast: '–í–∫–ª—é—á—ë–Ω' },
      suite: { area: '50 –º¬≤', beds: '2 (1 –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è + –¥–∏–≤–∞–Ω)', breakfast: '–í–∫–ª—é—á—ë–Ω' }
    };
    return specs[room.type] || specs.standard;
  };

  const roomSpecs = getRoomSpecs();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
  const displayPhotos = room.photos && room.photos.length > 0 
    ? room.photos 
    : [{ photo_url: null }];

  return (
    <div className="section-padding bg-gray-50">
      <div className="container-custom">
        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <button 
          onClick={() => navigate(-1)} 
          className="mb-6 flex items-center text-dark-blue hover:text-gold transition"
        >
          <span className="mr-2">‚Üê</span>
          <span>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–æ–º–µ—Ä–∞–º</span>
        </button>

        <div className="bg-white rounded-xl overflow-hidden shadow-xl">
          {/* –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
          <div className="relative">
            <div className="h-96 bg-gradient-to-br from-gold to-yellow-500 relative overflow-hidden">
              {displayPhotos[currentImageIndex] && displayPhotos[currentImageIndex].photo_url ? (
                <img 
                  src={displayPhotos[currentImageIndex].photo_url} 
                  alt={room.name}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="absolute inset-0 bg-gradient-to-br from-blue-400 to-purple-600"></div>
              )}
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
              {displayPhotos.length > 1 && (
                <div className="absolute bottom-4 left-0 right-0 flex justify-center gap-2 z-10">
                  {displayPhotos.map((_, idx) => (
                    <button
                      key={idx}
                      onClick={() => setCurrentImageIndex(idx)}
                      className={`w-3 h-3 rounded-full transition ${
                        idx === currentImageIndex ? 'bg-white' : 'bg-white/50'
                      }`}
                    />
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="p-8">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ü–µ–Ω–∞ */}
            <div className="mb-6">
              <h1 className="text-4xl font-bold text-dark-blue mb-3">{room.name}</h1>
              <p className="text-3xl font-bold text-gold">
                {room.price} TJS <span className="text-lg text-gray-600">{t('rooms.perNight')}</span>
              </p>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div className="mb-8">
              <p className="text-gray-700 text-lg leading-relaxed">{room.description}</p>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
            <div className="mb-8 bg-gray-50 rounded-lg p-6">
              <h2 className="text-2xl font-semibold mb-4 text-dark-blue">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ–º–µ—Ä–∞</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex justify-between py-3 border-b border-gray-200">
                  <span className="text-gray-600 font-medium">–ü–ª–æ—â–∞–¥—å</span>
                  <span className="text-dark-blue font-semibold">{roomSpecs.area}</span>
                </div>
                <div className="flex justify-between py-3 border-b border-gray-200">
                  <span className="text-gray-600 font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π</span>
                  <span className="text-dark-blue font-semibold">{room.capacity} {t('rooms.guests')}</span>
                </div>
                <div className="flex justify-between py-3 border-b border-gray-200">
                  <span className="text-gray-600 font-medium">–ö—Ä–æ–≤–∞—Ç–∏</span>
                  <span className="text-dark-blue font-semibold">{roomSpecs.beds}</span>
                </div>
                <div className="flex justify-between py-3 border-b border-gray-200">
                  <span className="text-gray-600 font-medium">–ó–∞–≤—Ç—Ä–∞–∫</span>
                  <span className="text-dark-blue font-semibold">{roomSpecs.breakfast}</span>
                </div>
                <div className="flex justify-between py-3">
                  <span className="text-gray-600 font-medium">Wi-Fi</span>
                  <span className="text-dark-blue font-semibold">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                </div>
              </div>
            </div>

            {/* –£–¥–æ–±—Å—Ç–≤–∞ */}
            <div className="mb-8">
              <h2 className="text-2xl font-semibold mb-4 text-dark-blue">{t('rooms.amenities')}</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {amenities.map((amenity, idx) => (
                  <div key={idx} className="flex items-center bg-gray-50 p-4 rounded-lg hover:bg-gray-100 transition">
                    <span className="mr-3 text-gold text-xl">‚úì</span>
                    <span className="text-gray-700">{amenity}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex flex-col md:flex-row gap-4">
              <button
                onClick={() => setShowBookingModal(true)}
                className="btn-primary flex-1 text-center py-4 text-lg hover:scale-105 transition"
              >
                {t('rooms.bookNow')}
              </button>
              
              <a 
                href="https://wa.me/99293500777?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!%20–•–æ—á—É%20–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å%20–Ω–æ–º–µ—Ä" 
                target="_blank"
                rel="noopener noreferrer"
                className="bg-green-500 hover:bg-green-600 text-white font-semibold py-4 px-6 rounded-lg text-center transition flex items-center justify-center gap-2"
              >
                <span>üí¨</span> WhatsApp
              </a>
              
              <a 
                href="https://t.me/hotelvahdat" 
                target="_blank"
                rel="noopener noreferrer"
                className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-4 px-6 rounded-lg text-center transition flex items-center justify-center gap-2"
              >
                <span>‚úàÔ∏è</span> Telegram
              </a>
              
              <a 
                href="tel:+99237227777" 
                className="bg-dark-blue hover:bg-blue-900 text-white font-semibold py-4 px-6 rounded-lg text-center transition flex items-center justify-center gap-2"
              >
                <span>üìû</span> –ü–æ–∑–≤–æ–Ω–∏—Ç—å
              </a>
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <BookingModal 
        isOpen={showBookingModal}
        onClose={() => setShowBookingModal(false)}
        room={room}
      />
    </div>
  );
}

export default RoomDetails;

